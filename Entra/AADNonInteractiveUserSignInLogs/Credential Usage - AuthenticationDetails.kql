// Objective: Tracks authentication method usage for non-interactive Entra ID sign-ins using AADNonInteractiveUserSignInLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
let TargetUPNs = dynamic([]);  // e.g., ["svc_backup@domain.com", "svc_graph@domain.com"]
// ----- Part 1: Filter Non-Interactive Sign-ins (Client/Service Auth) -----
AADNonInteractiveUserSignInLogs
| where TimeGenerated > ago(30d)
| where array_length(TargetUPNs) == 0 or UserPrincipalName in (TargetUPNs)
// ----- Part 2: Expand Authentication Steps -----
| mv-expand AuthStep = todynamic(AuthenticationDetails)
| extend 
    AuthMethod = tostring(AuthStep.authenticationMethod),
    AuthStepTime = tostring(AuthStep.authenticationStepDateTime),
    AuthRequirement = tostring(AuthStep.authenticationStepRequirement),
    AuthResultDetail = tostring(AuthStep.authenticationStepResultDetail),
    Succeeded = tostring(AuthStep.succeeded)
// ----- Part 3: Enrich with Location, Device, and Token Info -----
| extend DeviceInfo = parse_json(DeviceDetail)
| extend LocationInfo = parse_json(LocationDetails)
| extend TokenDetails = parse_json(TokenProtectionStatusDetails)
| extend CAStatus = tostring(ConditionalAccessStatus)
| extend ClientType = tostring(ClientAppUsed)
| extend IP = tostring(IPAddress)
| extend DeviceOS = tostring(DeviceInfo.operatingSystem)
| extend Geo = strcat(tostring(LocationInfo.city), ", ", tostring(LocationInfo.state))
| extend SessionStatus = tostring(TokenDetails.signInSessionStatus)
// ----- Part 4: Filter Out Noise (Optional) -----
| where AuthMethod != "Previously satisfied"
| where isnotempty(AppDisplayName)
// ----- Part 5: Final Output -----
| project TimeGenerated, UserPrincipalName, AppDisplayName, ClientType, AuthMethod, AuthRequirement, AuthResultDetail, Succeeded, AuthStepTime, DeviceOS, Geo, IP, CAStatus, SessionStatus
| sort by TimeGenerated desc
| take 50
