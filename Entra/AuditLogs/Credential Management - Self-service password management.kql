// Objective: Aggregates and classifies user self-service password reset (SSPR) attempts in Entra ID using AuditLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave list empty to return all SSPR attempts.
//
let TargetUsers = dynamic([]); // e.g., ["user1@agency.gov", "user2@agency.gov"]
//
// ----- Part 1: Pull SSPR Audit Logs -----
// Service = "Self-service Password Management"
// We extract user, IP, and reason details.
//
let SSPRData = AuditLogs
| where TimeGenerated > ago(30d)
| where LoggedByService == "Self-service Password Management"
| extend 
    User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName),
    UserIp = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress),
    Reason = tostring(ResultReason),
    CorrelationId = CorrelationId
| where array_length(TargetUsers) == 0 or User in (TargetUsers);
//
// ----- Part 2: Summarize Attempts by CorrelationId -----
// Group all steps in a given SSPR attempt.
//
SSPRData
| summarize 
    AttemptReasons = make_list(Reason),
    AuthMethodMissing = countif(Reason has "insufficient authentication methods"),
    PasswordSubmitFailures = countif(Reason has "User submitted a new password"),
    Events = count()
    by CorrelationId, User, UserIp
//
// ----- Part 3: Classify Each SSPR Attempt -----
// Clearly label what kind of user experience was observed.
//
| extend 
    SSPR_Flow_Classification = case(
        AuthMethodMissing > 0, "Missing MFA Setup",
        PasswordSubmitFailures >= 3, "Repeated Password Failures",
        "Normal SSPR Flow"
    )
//
// ----- Part 4: Final Output -----
// Easy-to-read table showing user attempts and challenges.
//
| project CorrelationId, User, UserIp, SSPR_Flow_Classification, AttemptReasons, AuthMethodMissing, PasswordSubmitFailures, Events
| sort by SSPR_Flow_Classification desc, User asc
| take 50
